{"version":3,"sources":["Renderer.tsx","user-code.ts","window-messages.ts","structure.ts","error.ts","index.tsx"],"names":["components","Button","data","style","onClick","console","log","type","text","Iframe","id","url","URL","src","params","Object","keys","forEach","key","searchParams","set","href","title","Image","alt","Input","onChange","value","Remote","Text","StructureComponent","item","structure","Component","useState","state","setState","setRenderer","layout","position","top","y","left","x","width","height","items","values","getItems","map","siteBaseUrl","worker","Worker","postMessage","command","itemsMap","codeUrl","filter","currentTarget","setData","setDefaultEvents","Promise","resolve","onmessage","overrideData","setLayout","overrideLayout","setOnClick","setEventListener","callbackId","updateItem","selector","substring","message","window","addEventListener","payload","renderers","render","renderer","prop","override","assign","event","cb","urlParams","URLSearchParams","location","search","site","get","fetchJson","request","a","fetch","response","json","structureApi","userCode","windowMessages","ReactDom","Renderer","document","getElementById"],"mappings":"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","file":"static/js/main.598ac242.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ButtonProps,\n  IframeProps,\n  ImageProps,\n  InputProps,\n  Item,\n  Layout,\n  RemoteProps,\n  StructureApi,\n  TextProps,\n} from \"./types\";\n\nfunction wrapperStyle({ y: top, x: left, width }: Layout): React.CSSProperties {\n  return {\n    position: \"absolute\",\n    top,\n    left,\n    width,\n  };\n}\n\nfunction elementStyle({ width, height }: Layout): React.CSSProperties {\n  return {\n    width,\n    height,\n  };\n}\n\nfunction Button({ data, style, onClick }: ButtonProps): JSX.Element {\n  console.log(\"React rendering Button\");\n\n  return (\n    <button type=\"button\" style={style} onClick={onClick}>\n      {data.text}\n    </button>\n  );\n}\n\nfunction Image({ data, style }: ImageProps): JSX.Element {\n  console.log(\"React rendering Image\");\n\n  return <img src={data.src} alt=\"\" style={style} />;\n}\n\nfunction Input({ data, style, onChange }: InputProps): JSX.Element {\n  console.log(\"React rendering Input\");\n\n  return <input onChange={onChange} style={style} value={data.value} />;\n}\n\nfunction Text({ data }: TextProps): JSX.Element {\n  console.log(\"React rendering Text\");\n\n  return <span>{data.text}</span>;\n}\n\nfunction Iframe({ id, data, style }: IframeProps): JSX.Element {\n  console.log(\"React rendering Iframe\");\n\n  const url = new URL(data.src);\n\n  if (data.params) {\n    Object.keys(data.params).forEach((key) => {\n      url.searchParams.set(key, data.params[key]);\n    });\n  }\n\n  // The iframe needs the element id, so it can send it with the messages\n  // to the main window.\n  url.searchParams.set(\"id\", id);\n\n  return <iframe src={url.href} title={data.title} style={style} />;\n}\n\nfunction Remote({ data }: RemoteProps): JSX.Element {\n  return <div>{data.src}</div>;\n}\n\nconst components = { Button, Iframe, Image, Input, Remote, Text };\n\nfunction StructureComponent({\n  item,\n  structure,\n}: {\n  item: Item;\n  structure: StructureApi;\n}): JSX.Element {\n  const Component = components[item.type];\n  const [state, setState] = useState(false);\n  structure.setRenderer(item.id, () => setState(!state));\n\n  return (\n    <div style={wrapperStyle(item.layout)} id={item.id}>\n      <Component {...item} style={elementStyle(item.layout)} />\n    </div>\n  );\n}\n\nexport default function ({\n  structure,\n}: {\n  structure: StructureApi;\n}): JSX.Element {\n  console.log(\"React rendering Renderer\");\n\n  const items = Object.values(structure.getItems());\n\n  return (\n    <div id=\"renderer\">\n      {items.map((item) => (\n        <StructureComponent key={item.id} item={item} structure={structure} />\n      ))}\n    </div>\n  );\n}\n","import { StructureApi } from \"./types\";\n\ntype IncomingMessage = {\n  command: \"setData\" | \"setLayout\" | \"setOnClick\" | \"userCodeRan\";\n  selector: string;\n  overrideData?: unknown;\n  overrideLayout?: unknown;\n  callbackId?: string;\n};\n\ntype OutgoingMessage = {\n  command: \"callback\" | \"setData\";\n  callbackId?: string;\n  overrideData?: unknown;\n};\n\n// Adding a default onChange to all inputs, so the worker will have\n// access to input values. Doing this after the \"init\" postMessage,\n// because it's unable to send functions.\nfunction setDefaultEvents(structure: StructureApi, worker: Worker) {\n  const inputs = Object.values(structure.getItems()).filter(\n    (item) => item.type === \"Input\",\n  );\n  inputs.forEach((item) => {\n    // eslint-disable-next-line no-param-reassign\n    item.onChange = ({ currentTarget }) => {\n      const { value } = currentTarget;\n\n      structure.setData(item.id, \"data\", { value });\n\n      worker.postMessage({\n        command: \"setData\",\n        id: item.id,\n        data: item.data,\n      });\n    };\n  });\n}\n\nexport default function (\n  siteBaseUrl: string,\n  structure: StructureApi,\n): Promise<void> {\n  const worker = new Worker(\"worker.js\");\n\n  worker.postMessage({\n    command: \"init\",\n    itemsMap: structure.getItems(),\n    codeUrl: `${siteBaseUrl}/code.js`,\n  });\n\n  setDefaultEvents(structure, worker);\n\n  const updateItem = (\n    id: string,\n    data: IncomingMessage,\n    postMessage: (message: OutgoingMessage) => void,\n  ) => {\n    const commands: { [key: string]: () => void } = {\n      setData: () => {\n        structure.setData(id, \"data\", data.overrideData);\n      },\n      setLayout: () => {\n        structure.setData(id, \"layout\", data.overrideLayout);\n      },\n      setOnClick: () => {\n        structure.setEventListener(id, \"onClick\", () => {\n          postMessage({\n            command: \"callback\",\n            callbackId: data.callbackId as string,\n          });\n        });\n      },\n    };\n    commands[data.command]();\n  };\n\n  return new Promise((resolve) => {\n    worker.onmessage = ({ data }: { data: IncomingMessage }) => {\n      console.log(\"worker to main:\", data.command);\n\n      if (data.command === \"userCodeRan\") {\n        resolve();\n        return;\n      }\n\n      // TODO: convert selector to ID in structure api.\n      updateItem(data.selector.substring(1), data, (message) => {\n        worker.postMessage(message);\n      });\n    };\n  });\n}\n","import { StructureApi } from \"./types\";\n\nexport default function (structure: StructureApi): void {\n  window.addEventListener(\"message\", ({ data }) => {\n    const { payload } = data;\n    if (!payload?.id) return;\n\n    const commands: { [key: string]: () => void } = {\n      setLayout: () => {\n        structure.setData(payload.id, \"layout\", payload.overrideLayout);\n      },\n    };\n    commands[payload.command]();\n  });\n}\n","import { Items, StructureApi } from \"./types\";\nimport logError from \"./error\";\n\nexport default function (items: Items): StructureApi {\n  const renderers: {\n    [id: string]: () => void;\n  } = {};\n\n  const render = (id: string) => {\n    if (!renderers[id]) {\n      logError(\"no renderer for id\", id);\n      return;\n    }\n\n    renderers[id]();\n  };\n\n  return {\n    setRenderer: (id: string, renderer: () => void): void => {\n      renderers[id] = renderer;\n    },\n    setData: (id: string, prop: \"data\" | \"layout\", override: unknown): void => {\n      const item = items[id];\n      if (!item) return;\n      Object.assign(item[prop], override);\n      render(id);\n    },\n    setEventListener: (\n      id: string,\n      event: \"onClick\" | \"onChange\",\n      cb: () => void,\n    ): void => {\n      const item = items[id];\n      if (!item) return;\n      item[event] = cb;\n      render(id);\n    },\n    getItems: (): Items => items,\n  };\n}\n","export default function logError(title: string, value: string): void {\n  console.log(`%c${title}: %c${value}`, \"color: #bada55\", \"color: red\");\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport Renderer from \"./Renderer\";\nimport userCode from \"./user-code\";\nimport windowMessages from \"./window-messages\";\nimport { Items } from \"./types\";\nimport structureApi from \"./structure\";\n\nimport \"./index.css\";\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst site = urlParams.get(\"site\") ? urlParams.get(\"site\") : \"button\";\nconst siteBaseUrl = `/${site}`;\n\nasync function fetchJson<T>(request: RequestInfo): Promise<T> {\n  const response = await fetch(request);\n  return response.json();\n}\n\n//\n// async function fetchText(request: RequestInfo): Promise<string> {\n//   const response = await fetch(request);\n//   return response.text();\n// }\n\n(async () => {\n  const items = await fetchJson<Items>(`${siteBaseUrl}/structure.json`);\n  const structure = structureApi(items);\n\n  // fetchText(data.src).then((code) => {\n  // console.log(code);\n  // });\n\n  // Don't render anything before first userCode run, to avoid re-rendering\n  // on each worker set command.\n  await userCode(siteBaseUrl, structure);\n\n  // listen to incoming messages from child windows.\n  windowMessages(structure);\n\n  ReactDom.render(\n    <Renderer structure={structure} />,\n    document.getElementById(\"root\"),\n  );\n})();\n"],"sourceRoot":""}