{"version":3,"sources":["Renderer.tsx","error.ts","user-code.ts","index.tsx"],"names":["elementStyle","layout","css","width","height","components","Button","data","style","onClick","console","log","type","text","Iframe","id","url","URL","src","params","Object","keys","forEach","key","searchParams","set","href","title","Image","alt","Remote","fetchText","request","a","fetch","response","useEffect","then","code","Text","StructureComponent","item","rerender","Component","useState","state","setState","add","position","top","y","left","x","items","map","logError","value","itemsMap","updateItem","postBack","commands","setData","assign","overrideData","setLayout","overrideLayout","setOnClick","command","callbackId","Promise","resolve","window","addEventListener","origin","payload","message","postMessage","worker","Worker","onmessage","selector","substring","codeUrl","fetchJson","json","renderers","renderer","render","ReactDom","Renderer","values","document","getElementById","userCode"],"mappings":"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","file":"static/js/main.452ef197.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Item, Layout, Rerender } from \"./types\";\n\nfunction wrapperStyle(layout: Layout): React.CSSProperties {\n  return {\n    position: \"absolute\",\n    top: `${layout.y}px`,\n    left: `${layout.x}px`,\n  };\n}\n\nfunction elementStyle(layout: Layout): React.CSSProperties {\n  const css: React.CSSProperties = {};\n\n  if (layout.width) css.width = `${layout.width}px`;\n  if (layout.height) css.height = `${layout.height}px`;\n\n  return css;\n}\n\ntype ButtonProps = {\n  data: { text: string };\n  style: React.CSSProperties;\n  onClick?: () => void;\n};\nfunction Button({ data, style, onClick }: ButtonProps): JSX.Element {\n  console.log(\"Button\");\n\n  return (\n    <button type=\"button\" style={style} onClick={onClick}>\n      {data.text}\n    </button>\n  );\n}\n\ntype ImageProps = {\n  data: { src: string };\n  style: React.CSSProperties;\n};\nfunction Image({ data, style }: ImageProps): JSX.Element {\n  console.log(\"Image\");\n\n  return <img src={data.src} alt=\"\" style={style} />;\n}\n\ntype TextProps = {\n  data: { text: string };\n  style: React.CSSProperties;\n};\nfunction Text({ data }: TextProps): JSX.Element {\n  console.log(\"Text\");\n\n  return <span>{data.text}</span>;\n}\n\ntype IframeParams = { [key: string]: string };\ntype IframeProps = {\n  id: string;\n  data: { src: string; title: string; params: IframeParams };\n  style: React.CSSProperties;\n};\nfunction Iframe({ id, data, style }: IframeProps): JSX.Element {\n  console.log(\"Iframe\");\n\n  const url = new URL(data.src);\n\n  if (data.params) {\n    Object.keys(data.params).forEach((key) => {\n      url.searchParams.set(key, data.params[key]);\n    });\n  }\n\n  // The iframe needs the element id, so it can send it with the messages\n  // to the main window.\n  url.searchParams.set(\"id\", id);\n\n  return <iframe src={url.href} title={data.title} style={style} />;\n}\n\ntype RemoteProps = {\n  data: { src: string };\n  style: React.CSSProperties;\n};\nfunction Remote({ data }: RemoteProps): JSX.Element {\n  const fetchText = async (request: RequestInfo): Promise<string> => {\n    const response = await fetch(request);\n    return response.text();\n  };\n\n  useEffect(() => {\n    fetchText(data.src).then((code) => {\n      // console.log(code);\n    });\n  });\n  return <div>{data.src}</div>;\n}\n\nconst components = { Button, Iframe, Image, Remote, Text };\n\nfunction StructureComponent({\n  item,\n  rerender,\n}: {\n  item: Item;\n  rerender: Rerender;\n}): JSX.Element {\n  const Component = components[item.type];\n  const [state, setState] = useState(false);\n  rerender.add(item.id, () => setState(!state));\n\n  return (\n    <div style={wrapperStyle(item.layout)} id={item.id}>\n      <Component {...item} style={elementStyle(item.layout)} />\n    </div>\n  );\n}\n\nexport default function ({\n  items,\n  rerender,\n}: {\n  items: Item[];\n  rerender: Rerender;\n}): JSX.Element {\n  console.log(\"Renderer\");\n\n  return (\n    <div id=\"renderer\">\n      {items.map((item) => (\n        <StructureComponent key={item.id} item={item} rerender={rerender} />\n      ))}\n    </div>\n  );\n}\n","export default function logError(title: string, value: string): void {\n  console.log(`%c${title}: %c${value}`, \"color: #bada55\", \"color: red\");\n}\n","import { Items, Rerender } from \"./types\";\nimport logError from \"./error\";\n\ntype IncomingMessage = {\n  command: \"setData\" | \"setLayout\" | \"setOnClick\" | \"userCodeRan\";\n  selector: string;\n  overrideData?: unknown;\n  overrideLayout?: unknown;\n  callbackId?: string;\n};\n\ntype OutgoingMessage = {\n  command: \"callback\";\n  callbackId?: string;\n};\n\nexport default function (itemsMap: Items, rerender: Rerender): Promise<void> {\n  const updateItem = (\n    id: string,\n    data: IncomingMessage,\n    postBack: (message: OutgoingMessage) => void,\n  ) => {\n    const item = itemsMap[id];\n    if (!item) return;\n\n    const commands: { [key: string]: () => void } = {\n      setData: () => {\n        Object.assign(item.data, data.overrideData);\n      },\n      setLayout: () => {\n        Object.assign(item.layout, data.overrideLayout);\n      },\n      setOnClick: () => {\n        item.onClick = () => {\n          postBack({\n            command: \"callback\",\n            callbackId: data.callbackId as string,\n          });\n        };\n      },\n    };\n    if (!commands[data.command]) {\n      console.log(data);\n      logError(\"no such command\", data.command);\n      return;\n    }\n    commands[data.command]();\n    rerender.rerender(item.id);\n  };\n\n  return new Promise((resolve) => {\n    window.addEventListener(\"message\", ({ data, origin }) => {\n      if (!data?.payload?.id) return;\n      const item = itemsMap[data.payload.id];\n      if (!item) return;\n\n      // Check that data.payload.id and event.origin match, to prevent the iframe\n      // from altering other elements.\n      const url = new URL(item.data.src);\n      if (url.origin !== origin) return;\n\n      updateItem(item.id, data.payload, (message) => {\n        window.postMessage(message, origin);\n      });\n    });\n\n    const worker = new Worker(\"worker.js\");\n    worker.onmessage = ({ data }: { data: IncomingMessage }) => {\n      console.log(\"worker to main\", data);\n\n      if (data.command === \"userCodeRan\") {\n        resolve();\n        return;\n      }\n\n      updateItem(data.selector.substring(1), data, (message) => {\n        worker.postMessage(message);\n      });\n    };\n\n    worker.postMessage({\n      command: \"init\",\n      itemsMap,\n      codeUrl: \"/code.js\",\n    });\n  });\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport Renderer from \"./Renderer\";\nimport userCode from \"./user-code\";\nimport { Items, Rerender, Rerenders } from \"./types\";\nimport logError from \"./error\";\n\nimport \"./index.css\";\n\nasync function fetchJson<T>(request: RequestInfo): Promise<T> {\n  const response = await fetch(request);\n  return response.json();\n}\n\nconst rerender: Rerender = (() => {\n  const renderers: Rerenders = {};\n\n  return {\n    add: (id: string, renderer: () => void) => {\n      renderers[id] = renderer;\n    },\n    rerender: (id: string) => {\n      if (!renderers[id]) {\n        logError(\"no renderer for id\", id);\n        return;\n      }\n\n      renderers[id]();\n    },\n  };\n})();\n\nfunction render(items: Items) {\n  ReactDom.render(\n    <Renderer items={Object.values(items)} rerender={rerender} />,\n    document.getElementById(\"root\"),\n  );\n}\n\n(async () => {\n  const url = \"/structure.json\";\n  const items = await fetchJson<Items>(url);\n\n  // Don't render anything before first userCode run, to avoid re-rendering\n  // on each worker set command.\n  await userCode(items, rerender);\n\n  render(items);\n})();\n"],"sourceRoot":""}